name: m2-actions-test

on: [push]

jobs:
  magento2-build:
    runs-on: ubuntu-latest
    name: 'm2 tests & build'
    services:
      mysql:
        image: docker://mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: magento
          MYSQL_DATABASE: magento
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      opensearch:
        image: opensearchproject/opensearch:1.2.1
        ports:
          - 9200:9200
        options: -e="discovery.type=single-node" -e "plugins.security.disabled=true"  -e "plugins.security.ssl.http.enabled=false" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
    - uses: actions/checkout@v4  

    - name: "Update Composer to v2"
      run: composer self-update --2

    - name: 'Install Magento'
      if: (!cancelled())
      uses: MAD-I-T/magento-actions@v3.30
      env:
        COMPOSER_AUTH: |
          {
            "http-basic": {
              "repo.magento.com": {
                "username": "${{ secrets.MAGENTO_USERNAME }}",
                "password": "${{ secrets.MAGENTO_PASSWORD }}"
              }
            }
          }
      with:
        process: 'install-magento'
        magento_version: 2.4.7
        
    - name: 'Install PWA-Studio Project'
      if: (!cancelled())
      uses: MAD-I-T/magento-actions@v3.30
      with:
        process: 'pwa-studio-install'
        no_push: 1
    
    - name: 'Launch Magento2 Unit Test'
      if: (!cancelled())
      uses: MAD-I-T/magento-actions@v3.30
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'unit-test'

    - name: 'Launch Unit Test Filtered by Testsuite'
      if: (!cancelled())
      uses: MAD-I-T/magento-actions@v3.30
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'unit-test'
        testsuite: 'Magento_Unit_Tests_Other'

    - name: 'Launch Unit Test for Specific Module (module-email)'
      if: (!cancelled())
      uses: MAD-I-T/magento-actions@v3.30
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'unit-test'
        unit_test_subset_path: 'vendor/magento/module-email/Test/Unit'

    - name: 'Launch Static Test'
      if: (!cancelled())
      uses: MAD-I-T/magento-actions@v3.30
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'static-test'
        
    - name: 'Magento Coding Standard Checker'
      if: (!cancelled())
      uses: MAD-I-T/magento-actions@v3.30
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'phpcs-test'
        extension: 'magento/vendor/magento/module-email'
        severity: 10
        standard: 'Magento2'
        
    - name: 'Launch Magento2 Build'
      if: (!cancelled())
      id: build
      uses: MAD-I-T/magento-actions@v3.30
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'build'

    - name: 'Launch Security Scanner Files'
      if: (!cancelled())
      uses: MAD-I-T/magento-actions@v3.30
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'security-scan-files'
        
    - name: 'Launch Security Scanner Modules'
      if: (steps.build.outcome == 'success') && (!cancelled())
      uses: MAD-I-T/magento-actions@v3.30
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
      with:
        process: 'security-scan-modules'

    - name: 'Mess Detector'
      if: (!cancelled())
      uses: MAD-I-T/magento-actions@v3.30
      with:
        process: 'mess-detector'
        md_src_path: 'vendor/magento/module-email'

    - name: 'PHPStan'
      if: (!cancelled())
      uses: MAD-I-T/magento-actions@v3.30
      with:
        process: 'phpstan'
        exec_path: 'vendor/magento/module-email'


    #### Zero Downtime Deployment (Staging/Production)
    - name: 'Zero Downtime Deploy with No Permission Check'
      if: ${{false}} # if: steps.build.outcome == 'success'
      uses: MAD-I-T/magento-actions@v3.30
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        BUCKET_COMMIT: bucket-commit-${{github.sha}}.tar.gz
        MYSQL_ROOT_PASSWORD: magento
        MYSQL_DATABASE: magento
        HOST_DEPLOY_PATH: ${{secrets.STAGE_HOST_DEPLOY_PATH}}
        HOST_DEPLOY_PATH_BUCKET: ${{secrets.STAGE_HOST_DEPLOY_PATH}}/bucket
        SSH_PRIVATE_KEY: ${{secrets.STAGE_SSH_PRIVATE_KEY}}
        SSH_CONFIG: ${{secrets.STAGE_SSH_CONFIG}}
        WRITE_USE_SUDO: false
      with:
        deployer: 'no-permission-check'
        process: 'deploy-staging'
        
    - name: 'Unlock Deployer if Fails'
      if: ${{false}} # if: failure() || cancelled()
      uses: MAD-I-T/magento-actions@v3.30
      env:
        COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        BUCKET_COMMIT: bucket-commit-${{github.sha}}.tar.gz
        MYSQL_ROOT_PASSWORD: magento
        MYSQL_DATABASE: magento
        HOST_DEPLOY_PATH: ${{secrets.STAGE_HOST_DEPLOY_PATH}}
        HOST_DEPLOY_PATH_BUCKET: ${{secrets.STAGE_HOST_DEPLOY_PATH}}/bucket
        SSH_PRIVATE_KEY: ${{secrets.STAGE_SSH_PRIVATE_KEY}}
        SSH_CONFIG: ${{secrets.STAGE_SSH_CONFIG}}
        WRITE_USE_SUDO: false
      with:
        process: 'cleanup-staging'

  magento2-integration-test:
    runs-on: ubuntu-latest
    name: 'm2 integration test'
    services:
      mysql:
        image: docker://mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: magento
          MYSQL_DATABASE: magento
        ports:
          - 3106:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      rabbitmq:
        image: docker://rabbitmq:3.9-alpine
        env:
          RABBITMQ_DEFAULT_USER: "magento"
          RABBITMQ_DEFAULT_PASS: "magento"
          RABBITMQ_DEFAULT_VHOST: "/"
        ports:
          - 5672:5672
      opensearch:
        image: ghcr.io/mad-i-t/magento-opensearch:2.5.0
        ports:
          - 9200:9200
        options: -e="discovery.type=single-node" -e "plugins.security.disabled=true" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - uses: actions/checkout@v4  
      
      - name: 'Install Magento for Integration Test'
        if: (!cancelled())
        uses: MAD-I-T/magento-actions@v3.30
        env:
          COMPOSER_AUTH: |
            {
              "http-basic": {
                "repo.magento.com": {
                  "username": "${{ secrets.MAGENTO_USERNAME }}",
                  "password": "${{ secrets.MAGENTO_PASSWORD }}"
                }
              }
            }
        with:
          process: 'install-magento'
          magento_version: 2.4.7
          no_push: 1

      - name: 'Launch Custom Integration Test Suite'
        if: (!cancelled())
        uses: MAD-I-T/magento-actions@v3.30
        env:
          COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        with:
          process: 'integration-test'
          testsuite: "Memory Usage Tests"
      
      - name: 'Run Specific Integration Test Class'
        if: (!cancelled())
        uses: MAD-I-T/magento-actions@v3.30
        env:
          COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        with:
          process: 'integration-test'
          integration_class: "./testsuite/Magento/MemoryUsageTest.php"

      - name: 'Run Integration Test with Filter'
        if: (!cancelled())
        uses: MAD-I-T/magento-actions@v3.30
        env:
          COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
        with:
          process: 'integration-test'
          integration_class: "./testsuite/Magento/MemoryUsageTest.php"
          integration_filter: "testAppReinitializationNoMemoryLeak"
